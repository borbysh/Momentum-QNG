{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/borbysh/Momentum-QNG/blob/main/Benchmarks%20added\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8AZzBYG3JqA3",
        "outputId": "43a89af3-ba9f-4006-e2b1-dccd0d8402d7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting pennylane\n",
            "  Downloading PennyLane-0.39.0-py3-none-any.whl.metadata (9.2 kB)\n",
            "Requirement already satisfied: numpy<2.1 in /usr/local/lib/python3.10/dist-packages (from pennylane) (1.26.4)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from pennylane) (1.13.1)\n",
            "Requirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from pennylane) (3.4.2)\n",
            "Collecting rustworkx>=0.14.0 (from pennylane)\n",
            "  Downloading rustworkx-0.15.1-cp38-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (9.9 kB)\n",
            "Requirement already satisfied: autograd in /usr/local/lib/python3.10/dist-packages (from pennylane) (1.7.0)\n",
            "Requirement already satisfied: toml in /usr/local/lib/python3.10/dist-packages (from pennylane) (0.10.2)\n",
            "Collecting appdirs (from pennylane)\n",
            "  Downloading appdirs-1.4.4-py2.py3-none-any.whl.metadata (9.0 kB)\n",
            "Collecting autoray>=0.6.11 (from pennylane)\n",
            "  Downloading autoray-0.7.0-py3-none-any.whl.metadata (5.8 kB)\n",
            "Requirement already satisfied: cachetools in /usr/local/lib/python3.10/dist-packages (from pennylane) (5.5.0)\n",
            "Collecting pennylane-lightning>=0.39 (from pennylane)\n",
            "  Downloading PennyLane_Lightning-0.39.0-cp310-cp310-manylinux_2_28_x86_64.whl.metadata (26 kB)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from pennylane) (2.32.3)\n",
            "Requirement already satisfied: typing-extensions in /usr/local/lib/python3.10/dist-packages (from pennylane) (4.12.2)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from pennylane) (24.1)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->pennylane) (3.4.0)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->pennylane) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->pennylane) (2.2.3)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->pennylane) (2024.8.30)\n",
            "Downloading PennyLane-0.39.0-py3-none-any.whl (1.9 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.9/1.9 MB\u001b[0m \u001b[31m15.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading autoray-0.7.0-py3-none-any.whl (930 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m930.0/930.0 kB\u001b[0m \u001b[31m21.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading PennyLane_Lightning-0.39.0-cp310-cp310-manylinux_2_28_x86_64.whl (1.7 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.7/1.7 MB\u001b[0m \u001b[31m25.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading rustworkx-0.15.1-cp38-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (2.0 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.0/2.0 MB\u001b[0m \u001b[31m25.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading appdirs-1.4.4-py2.py3-none-any.whl (9.6 kB)\n",
            "Installing collected packages: appdirs, rustworkx, autoray, pennylane-lightning, pennylane\n",
            "Successfully installed appdirs-1.4.4 autoray-0.7.0 pennylane-0.39.0 pennylane-lightning-0.39.0 rustworkx-0.15.1\n"
          ]
        }
      ],
      "source": [
        "%pip install pennylane"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pennylane as qml\n",
        "from pennylane import numpy as np"
      ],
      "metadata": {
        "id": "h1u1Dos2KZNw"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "We are studying VQE optimization problem defined as minimization of Hamiltonian expectation value:\n",
        "\n",
        "$E(\\theta) = \\langle 0| U^{\\dagger}(\\theta) H U(\\theta)|0\\rangle$,\n",
        "\n",
        "where $H$ is a Hamiltonian operator, and $U(\\theta)$ is a parametrized unitary matrix.\n",
        "\n",
        "We study here the $N$-qubit quantum Sherrington-Kickpatrick model in the transverse field. It is defined by the following Hamiltonian:\n",
        "\n",
        "$H = \\sum_{(ij)} J_{ij} \\sigma_{i}^{z} \\sigma_{j}^{z} -g \\sum_{i} \\sigma_{i}^{x}$,\n",
        "\n",
        "where the first sum if over all pairs of sites $(ij)$ and $J_{ij} = \\mathcal{N}(0, 1)/ \\sqrt{N}$ are sampled from the normal distribution with zero mean and $1/N$ variance. At small $g < 1.5$ the model is generally in the localized spin glass phase. At large $g$ the model becomes paramagnetic in the $x$ direction.\n",
        "\n",
        "We would search for the model ground state in the glass regime, where there is a potential for local minimas in the energy landscape due to localization.\n",
        "\n",
        "For the recent discussion of the model physics and of potential ground state ansatzes see P. M. Schindler, T. Guaita, T. Shi, E. Demler, and J. I. Cirac, Variational Ansatz for the Ground State of the Quantum Sherrington-Kirkpatrick Model\n",
        " https://journals.aps.org/prl/abstract/10.1103/PhysRevLett.129.220401"
      ],
      "metadata": {
        "id": "usSxi20a6QfY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# define parameters in H\n",
        "N = 8      #number of qubits\n",
        "rng = np.random.default_rng(seed=42)\n",
        "g = 1.2    #Coupling of the transverse field\n",
        "ZZ = [qml.PauliZ(i)@qml.PauliZ(j) for i in range(N) for j in range(i+1,N)]\n",
        "ZZ_coeff = [rng.normal()/np.sqrt(N) for i in range(N) for j in range(i+1,N)]\n",
        "X = [qml.PauliX(i) for i in range(N)]\n",
        "X_coeff = [-g for i in range(N)]\n",
        "# Construct the Hamiltonian\n",
        "obs = ZZ + X\n",
        "coeffs = ZZ_coeff + X_coeff\n",
        "H = qml.Hamiltonian(coeffs, obs, grouping_type=\"qwc\")"
      ],
      "metadata": {
        "id": "myQtE1nvLCcf"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "The model Hamiltonian is real valued. Hence, the wave function ansatz can be also chosen to be real, consisting only from RY and CNOT gates. As the model contains all-to-all interations, arbitrary pairs of qubits may be potentially entangled.\n",
        "Such an entanglement can be potentially built by application of RY and CNOT gate on the corresponding pair of qubits.\n",
        "\n",
        "Our ansatz consists of two layers. First, RY and CNOT are applied on every pair of qubits. Second, additional RY rotations are applied on every qubit.\n",
        "\n"
      ],
      "metadata": {
        "id": "XNrwvnyU9o-p"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def ansatz(params, qubits):\n",
        "    pair = 0\n",
        "    for i in range(qubits-1):\n",
        "        for j in range(i+1, qubits):\n",
        "            qml.RY(params[pair], wires = i)\n",
        "            qml.CNOT(wires=[i, j])\n",
        "            pair += 1\n",
        "    for q in range(qubits):\n",
        "        qml.RY(params[pair+q], wires = q)"
      ],
      "metadata": {
        "id": "nY1lkTcBLduO"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dev = qml.device(\"default.qubit\", wires=N)\n",
        "@qml.qnode(dev)\n",
        "def cost(x):\n",
        "    ansatz(x, qubits=N)\n",
        "    return qml.expval(H)"
      ],
      "metadata": {
        "id": "dOZd79HeE_yu"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "Eg = H.eigendecomposition['eigval'][0]\n",
        "print(f\"Exact ground state energy is {Eg:.4f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lY5NYRYG4Sq3",
        "outputId": "ad78afde-cefa-4245-a38f-19fee9971451"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Exact ground state energy is -10.1315\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "opt = qml.MomentumQNGOptimizer(stepsize=0.06, momentum=0.95)\n",
        "max_steps=150\n",
        "num_params = int(N*(N+1)/2)\n",
        "init_params = 0.1*rng.normal(size = num_params)\n",
        "\n",
        "params = init_params\n",
        "old_cost = 9999.999999\n",
        "for i in range(max_steps):\n",
        "    params = opt.step(cost, params)\n",
        "    obj_value = cost(params)\n",
        "    print(\"Cost after step {:5d}: {: .7f}\".format(i + 1, obj_value))\n",
        "    if np.round(old_cost, 7) == np.round(obj_value, 7):\n",
        "        break\n",
        "    else:\n",
        "        old_cost = obj_value\n",
        "\n",
        "print(\"Optimized parameters: {}\".format(params))\n",
        "print(\"Optimized objective function value: {}\".format(obj_value))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gNIXLbwrNyAG",
        "outputId": "9dbb7a45-2400-4a48-b558-0f583aee61eb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cost after step     1: -0.0270286\n",
            "Cost after step     2: -5.0625657\n",
            "Cost after step     3: -9.0581041\n",
            "Cost after step     4: -6.3984447\n",
            "Cost after step     5: -2.4597574\n",
            "Cost after step     6: -1.2259251\n",
            "Cost after step     7: -2.4788555\n",
            "Cost after step     8: -5.1328377\n",
            "Cost after step     9: -6.9389850\n",
            "Cost after step    10: -6.8763564\n",
            "Cost after step    11: -5.4937801\n",
            "Cost after step    12: -4.3318421\n",
            "Cost after step    13: -4.2662368\n",
            "Cost after step    14: -4.6547621\n",
            "Cost after step    15: -4.6885327\n",
            "Cost after step    16: -4.5204296\n",
            "Cost after step    17: -4.6916790\n",
            "Cost after step    18: -5.0809403\n",
            "Cost after step    19: -5.0126863\n",
            "Cost after step    20: -4.9522111\n",
            "Cost after step    21: -5.9642788\n",
            "Cost after step    22: -6.6301081\n",
            "Cost after step    23: -6.0885920\n",
            "Cost after step    24: -5.6628015\n",
            "Cost after step    25: -6.0229570\n",
            "Cost after step    26: -6.5208485\n",
            "Cost after step    27: -7.0377201\n",
            "Cost after step    28: -7.3033168\n",
            "Cost after step    29: -7.0900325\n",
            "Cost after step    30: -7.7858810\n",
            "Cost after step    31: -8.6773658\n",
            "Cost after step    32: -8.3917598\n",
            "Cost after step    33: -7.5295425\n",
            "Cost after step    34: -6.7303436\n",
            "Cost after step    35: -6.7364464\n",
            "Cost after step    36: -7.3506593\n",
            "Cost after step    37: -7.8881273\n",
            "Cost after step    38: -8.2758325\n",
            "Cost after step    39: -8.2084405\n",
            "Cost after step    40: -8.2416732\n",
            "Cost after step    41: -8.2987291\n",
            "Cost after step    42: -8.2442587\n",
            "Cost after step    43: -8.4057468\n",
            "Cost after step    44: -8.0653181\n",
            "Cost after step    45: -7.8913302\n",
            "Cost after step    46: -8.2318436\n",
            "Cost after step    47: -8.7578578\n",
            "Cost after step    48: -9.0353964\n",
            "Cost after step    49: -8.8166914\n",
            "Cost after step    50: -8.8175146\n",
            "Cost after step    51: -8.9882890\n",
            "Cost after step    52: -9.0544508\n",
            "Cost after step    53: -9.2548018\n",
            "Cost after step    54: -9.5857574\n",
            "Cost after step    55: -9.4594667\n",
            "Cost after step    56: -8.9325976\n",
            "Cost after step    57: -8.8227732\n",
            "Cost after step    58: -9.3198448\n",
            "Cost after step    59: -9.5822440\n",
            "Cost after step    60: -9.3459021\n",
            "Cost after step    61: -9.2890614\n",
            "Cost after step    62: -9.6785261\n",
            "Cost after step    63: -9.8407740\n",
            "Cost after step    64: -9.7545381\n",
            "Cost after step    65: -9.6013096\n",
            "Cost after step    66: -9.5665738\n",
            "Cost after step    67: -9.7652137\n",
            "Cost after step    68: -9.7864319\n",
            "Cost after step    69: -9.7968687\n",
            "Cost after step    70: -9.9385076\n",
            "Cost after step    71: -9.8729039\n",
            "Cost after step    72: -9.7168740\n",
            "Cost after step    73: -9.8260024\n",
            "Cost after step    74: -10.0342866\n",
            "Cost after step    75: -10.0460587\n",
            "Cost after step    76: -9.9833303\n",
            "Cost after step    77: -9.9094715\n",
            "Cost after step    78: -9.8801341\n",
            "Cost after step    79: -9.9917240\n",
            "Cost after step    80: -10.0490560\n",
            "Cost after step    81: -10.0550364\n",
            "Cost after step    82: -10.0926654\n",
            "Cost after step    83: -10.0776642\n",
            "Cost after step    84: -10.0547198\n",
            "Cost after step    85: -10.1134708\n",
            "Cost after step    86: -10.1528753\n",
            "Cost after step    87: -10.1218830\n",
            "Cost after step    88: -10.0790924\n",
            "Cost after step    89: -10.1386672\n",
            "Cost after step    90: -10.2560740\n",
            "Cost after step    91: -10.2688833\n",
            "Cost after step    92: -10.1658387\n",
            "Cost after step    93: -10.1313247\n",
            "Cost after step    94: -10.2013012\n",
            "Cost after step    95: -10.2518004\n",
            "Cost after step    96: -10.2858261\n",
            "Cost after step    97: -10.2682850\n",
            "Cost after step    98: -10.2010321\n",
            "Cost after step    99: -10.2354367\n",
            "Cost after step   100: -10.2874235\n",
            "Cost after step   101: -10.2488654\n",
            "Cost after step   102: -10.2321083\n",
            "Cost after step   103: -10.2907917\n",
            "Cost after step   104: -10.3274949\n",
            "Cost after step   105: -10.3167816\n",
            "Cost after step   106: -10.2932657\n",
            "Cost after step   107: -10.2828843\n",
            "Cost after step   108: -10.2800094\n",
            "Cost after step   109: -10.2828290\n",
            "Cost after step   110: -10.3188175\n",
            "Cost after step   111: -10.3482519\n",
            "Cost after step   112: -10.3329678\n",
            "Cost after step   113: -10.3259969\n",
            "Cost after step   114: -10.3291272\n",
            "Cost after step   115: -10.3179647\n",
            "Cost after step   116: -10.3299968\n",
            "Cost after step   117: -10.3475622\n",
            "Cost after step   118: -10.3411451\n",
            "Cost after step   119: -10.3451673\n",
            "Cost after step   120: -10.3618048\n",
            "Cost after step   121: -10.3554380\n",
            "Cost after step   122: -10.3472536\n",
            "Cost after step   123: -10.3487162\n",
            "Cost after step   124: -10.3543375\n",
            "Cost after step   125: -10.3680923\n",
            "Cost after step   126: -10.3705632\n",
            "Cost after step   127: -10.3657952\n",
            "Cost after step   128: -10.3651628\n",
            "Cost after step   129: -10.3608701\n",
            "Cost after step   130: -10.3649779\n",
            "Cost after step   131: -10.3819929\n",
            "Cost after step   132: -10.3830458\n",
            "Cost after step   133: -10.3719919\n",
            "Cost after step   134: -10.3731860\n",
            "Cost after step   135: -10.3782301\n",
            "Cost after step   136: -10.3805421\n",
            "Cost after step   137: -10.3827138\n",
            "Cost after step   138: -10.3830393\n",
            "Cost after step   139: -10.3831556\n",
            "Cost after step   140: -10.3855050\n",
            "Cost after step   141: -10.3873813\n",
            "Cost after step   142: -10.3867271\n",
            "Cost after step   143: -10.3833812\n",
            "Cost after step   144: -10.3844081\n",
            "Cost after step   145: -10.3913921\n",
            "Cost after step   146: -10.3949777\n",
            "Cost after step   147: -10.3945868\n",
            "Cost after step   148: -10.3919457\n",
            "Cost after step   149: -10.3866880\n",
            "Cost after step   150: -10.3874226\n",
            "Cost after step   151: -10.3950662\n",
            "Cost after step   152: -10.3977543\n",
            "Cost after step   153: -10.3955486\n",
            "Cost after step   154: -10.3953729\n",
            "Cost after step   155: -10.3958550\n",
            "Cost after step   156: -10.3959768\n",
            "Cost after step   157: -10.3960121\n",
            "Cost after step   158: -10.3948964\n",
            "Cost after step   159: -10.3949575\n",
            "Cost after step   160: -10.3984230\n",
            "Cost after step   161: -10.4017055\n",
            "Cost after step   162: -10.4000886\n",
            "Cost after step   163: -10.3967358\n",
            "Cost after step   164: -10.3974422\n",
            "Cost after step   165: -10.3995073\n",
            "Cost after step   166: -10.3989563\n",
            "Cost after step   167: -10.3995715\n",
            "Cost after step   168: -10.4019926\n",
            "Cost after step   169: -10.4014210\n",
            "Cost after step   170: -10.3997667\n",
            "Cost after step   171: -10.4003322\n",
            "Cost after step   172: -10.4008850\n",
            "Cost after step   173: -10.4008554\n",
            "Cost after step   174: -10.4015479\n",
            "Cost after step   175: -10.4020705\n",
            "Cost after step   176: -10.4022080\n",
            "Cost after step   177: -10.4023741\n",
            "Cost after step   178: -10.4021141\n",
            "Cost after step   179: -10.4018164\n",
            "Cost after step   180: -10.4019243\n",
            "Cost after step   181: -10.4025068\n",
            "Cost after step   182: -10.4033218\n",
            "Cost after step   183: -10.4032356\n",
            "Cost after step   184: -10.4024870\n",
            "Cost after step   185: -10.4026220\n",
            "Cost after step   186: -10.4032969\n",
            "Cost after step   187: -10.4034823\n",
            "Cost after step   188: -10.4034912\n",
            "Cost after step   189: -10.4033985\n",
            "Cost after step   190: -10.4031738\n",
            "Cost after step   191: -10.4034018\n",
            "Cost after step   192: -10.4038318\n",
            "Cost after step   193: -10.4038179\n",
            "Cost after step   194: -10.4036417\n",
            "Cost after step   195: -10.4037819\n",
            "Cost after step   196: -10.4041278\n",
            "Cost after step   197: -10.4042500\n",
            "Cost after step   198: -10.4039773\n",
            "Cost after step   199: -10.4037169\n",
            "Cost after step   200: -10.4038517\n",
            "Cost after step   201: -10.4042467\n",
            "Cost after step   202: -10.4045093\n",
            "Cost after step   203: -10.4044371\n",
            "Cost after step   204: -10.4042812\n",
            "Cost after step   205: -10.4042839\n",
            "Cost after step   206: -10.4042392\n",
            "Cost after step   207: -10.4041941\n",
            "Cost after step   208: -10.4044716\n",
            "Cost after step   209: -10.4047065\n",
            "Cost after step   210: -10.4045342\n",
            "Cost after step   211: -10.4044464\n",
            "Cost after step   212: -10.4046219\n",
            "Cost after step   213: -10.4046035\n",
            "Cost after step   214: -10.4044438\n",
            "Cost after step   215: -10.4045155\n",
            "Cost after step   216: -10.4047003\n",
            "Cost after step   217: -10.4047723\n",
            "Cost after step   218: -10.4047790\n",
            "Cost after step   219: -10.4047482\n",
            "Cost after step   220: -10.4046538\n",
            "Cost after step   221: -10.4046197\n",
            "Cost after step   222: -10.4047213\n",
            "Cost after step   223: -10.4048012\n",
            "Cost after step   224: -10.4048070\n",
            "Cost after step   225: -10.4048504\n",
            "Cost after step   226: -10.4048601\n",
            "Cost after step   227: -10.4047891\n",
            "Cost after step   228: -10.4047931\n",
            "Cost after step   229: -10.4048495\n",
            "Cost after step   230: -10.4048415\n",
            "Cost after step   231: -10.4048428\n",
            "Cost after step   232: -10.4048929\n",
            "Cost after step   233: -10.4049276\n",
            "Cost after step   234: -10.4049181\n",
            "Cost after step   235: -10.4048680\n",
            "Cost after step   236: -10.4048606\n",
            "Cost after step   237: -10.4049310\n",
            "Cost after step   238: -10.4049606\n",
            "Cost after step   239: -10.4049336\n",
            "Cost after step   240: -10.4049286\n",
            "Cost after step   241: -10.4049261\n",
            "Cost after step   242: -10.4049332\n",
            "Cost after step   243: -10.4049693\n",
            "Cost after step   244: -10.4049761\n",
            "Cost after step   245: -10.4049590\n",
            "Cost after step   246: -10.4049609\n",
            "Cost after step   247: -10.4049694\n",
            "Cost after step   248: -10.4049827\n",
            "Cost after step   249: -10.4049878\n",
            "Cost after step   250: -10.4049723\n",
            "Cost after step   251: -10.4049766\n",
            "Cost after step   252: -10.4050037\n",
            "Cost after step   253: -10.4050151\n",
            "Cost after step   254: -10.4050027\n",
            "Cost after step   255: -10.4049807\n",
            "Cost after step   256: -10.4049840\n",
            "Cost after step   257: -10.4050144\n",
            "Cost after step   258: -10.4050226\n",
            "Cost after step   259: -10.4050149\n",
            "Cost after step   260: -10.4050211\n",
            "Cost after step   261: -10.4050170\n",
            "Cost after step   262: -10.4050057\n",
            "Cost after step   263: -10.4050118\n",
            "Cost after step   264: -10.4050208\n",
            "Cost after step   265: -10.4050261\n",
            "Cost after step   266: -10.4050324\n",
            "Cost after step   267: -10.4050310\n",
            "Cost after step   268: -10.4050287\n",
            "Cost after step   269: -10.4050318\n",
            "Cost after step   270: -10.4050293\n",
            "Cost after step   271: -10.4050231\n",
            "Cost after step   272: -10.4050261\n",
            "Cost after step   273: -10.4050398\n",
            "Cost after step   274: -10.4050478\n",
            "Cost after step   275: -10.4050401\n",
            "Cost after step   276: -10.4050332\n",
            "Cost after step   277: -10.4050358\n",
            "Cost after step   278: -10.4050373\n",
            "Cost after step   279: -10.4050396\n",
            "Cost after step   280: -10.4050444\n",
            "Cost after step   281: -10.4050436\n",
            "Cost after step   282: -10.4050429\n",
            "Cost after step   283: -10.4050455\n",
            "Cost after step   284: -10.4050444\n",
            "Cost after step   285: -10.4050430\n",
            "Cost after step   286: -10.4050438\n",
            "Cost after step   287: -10.4050451\n",
            "Cost after step   288: -10.4050486\n",
            "Cost after step   289: -10.4050503\n",
            "Cost after step   290: -10.4050479\n",
            "Cost after step   291: -10.4050468\n",
            "Cost after step   292: -10.4050472\n",
            "Cost after step   293: -10.4050483\n",
            "Cost after step   294: -10.4050509\n",
            "Cost after step   295: -10.4050506\n",
            "Cost after step   296: -10.4050490\n",
            "Cost after step   297: -10.4050506\n",
            "Cost after step   298: -10.4050517\n",
            "Cost after step   299: -10.4050508\n",
            "Cost after step   300: -10.4050514\n",
            "Cost after step   301: -10.4050520\n",
            "Cost after step   302: -10.4050520\n",
            "Optimized parameters: [-0.23067228  0.03037951  0.18575358 -0.03949986 -0.07514255  0.05042577\n",
            "  0.22551847  0.09414922 -0.08950896  0.0194935  -0.00305262 -0.28191729\n",
            " -0.43207586  0.03481555 -0.16605016 -0.13843623 -0.27325137  0.01375531\n",
            " -0.13427286  0.09699986  0.0048091   0.33737391 -0.13487101  0.14195768\n",
            " -0.08226599  0.06945766  0.03490296  0.16455275  1.56928725  1.5709191\n",
            "  1.57023337  1.56922528  1.57093838  1.57053579  1.57161383  1.56979981]\n",
            "Optimized objective function value: -10.405052004291624\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def qng_session(params, stepsize=0.07, steps=300):\n",
        "  opt = qml.QNGOptimizer(stepsize=stepsize)\n",
        "  old_cost = 9999.999999\n",
        "\n",
        "  for i in range(steps):\n",
        "      params = opt.step(cost, params)\n",
        "      obj_value = cost(params)\n",
        "      qng_cost.append(obj_value)\n",
        "      if (i + 1) % 5 == 0:\n",
        "          #print(\"Cost after step {:5d}: {: .7f}\".format(i + 1, obj_value))\n",
        "          if np.round(old_cost, 4) == np.round(obj_value, 4):\n",
        "              break\n",
        "          else:\n",
        "              old_cost = obj_value\n",
        "  return params"
      ],
      "metadata": {
        "id": "zkZCJAWBc5Kl"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def momentum_session(params, stepsize=0.07, momentum=0.9, steps=300):\n",
        "  opt = qml.MomentumOptimizer(stepsize=stepsize, momentum=momentum)\n",
        "  old_cost = 9999.999999\n",
        "\n",
        "  for i in range(steps):\n",
        "      params = opt.step(cost, params)\n",
        "      obj_value = cost(params)\n",
        "      momentum_cost.append(obj_value)\n",
        "      if (i + 1) % 5 == 0:\n",
        "          #print(\"Cost after step {:5d}: {: .7f}\".format(i + 1, obj_value))\n",
        "          if np.round(old_cost, 4) == np.round(obj_value, 4):\n",
        "              break\n",
        "          else:\n",
        "              old_cost = obj_value\n",
        "  return params"
      ],
      "metadata": {
        "id": "qkLeU-Gwc7ib"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def momentum_qng_session(params, stepsize=0.07, momentum=0.9, steps=300):\n",
        "  opt = qml.MomentumQNGOptimizer(stepsize=stepsize, momentum=momentum)\n",
        "  old_cost = 9999.999999\n",
        "\n",
        "  for i in range(steps):\n",
        "      params = opt.step(cost, params)\n",
        "      obj_value = cost(params)\n",
        "      momentum_qng_cost.append(obj_value)\n",
        "      if (i + 1) % 5 == 0:\n",
        "          #print(\"Cost after step {:5d}: {: .7f}\".format(i + 1, obj_value))\n",
        "          if np.round(old_cost, 4) == np.round(obj_value, 4):\n",
        "              break\n",
        "          else:\n",
        "              old_cost = obj_value\n",
        "  return params"
      ],
      "metadata": {
        "id": "fcVUNL0_dFh4"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "iterations=300\n",
        "stepsize = 0.005\n",
        "momentum=0.9\n",
        "\n",
        "qng_cost = []\n",
        "momentum_qng_cost = []\n",
        "\n",
        "momentum_cost = []\n",
        "#np.random.seed(31415)\n",
        "#np.random.seed()\n",
        "np.random.seed(1)\n",
        "num_params = int(N*(N+1)/2)\n",
        "init_params = 0.1*rng.normal(size = num_params)\n",
        "\n",
        "params_qng = qng_session(init_params, stepsize, iterations)\n",
        "params_momentum_qng = momentum_qng_session(init_params, stepsize, momentum, iterations)\n",
        "\n",
        "params_momentum = momentum_session(init_params, stepsize, momentum, iterations)\n",
        "cost_qng = cost(params_qng)\n",
        "cost_momentum_qng = cost(params_momentum_qng)\n"
      ],
      "metadata": {
        "id": "Y_ABVbKidjFr"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "label_1 = 'QNG'\n",
        "label_2 = 'Momentum-QNG'\n",
        "label_3 = 'Momentum'\n",
        "\n",
        "plt.plot(qng_cost, color='r', marker='o', linestyle='--', linewidth = 2.0, label=label_1)\n",
        "plt.plot(momentum_qng_cost, color='g', marker='x', linestyle='--', linewidth = 2.0, label=label_2)\n",
        "plt.plot(momentum_cost, color='b', marker='+', linestyle='--', linewidth = 2.0, label=label_3)\n",
        "\n",
        "\n",
        "\n",
        "plt.title('VQE optimization of the Sherrington-Kirkpatrick problem')\n",
        "plt.xlabel('Steps')\n",
        "plt.ylabel('Cost')\n",
        "plt.legend(loc='upper right')\n",
        "plt.grid()\n",
        "\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "Nw8fetSGeQw1",
        "outputId": "95128171-b0cb-41ce-ba1d-d5209181aacb",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        }
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}